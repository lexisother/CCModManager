strategy:
  maxParallel: 3
  matrix:
    windows:
      jobArchName: 'Windows'
      imageName: 'windows-latest'
      agentArch: 'windows'
      artifactPrefix: 'windows.'
      artifactSuffix: ''
      netbuilder: 'core'
      lualibs: 'prebuilt'
      loveURL: 'https://github.com/love2d/love/releases/download/11.3/love-11.3-win32.zip'
      loveZIP: 'love.zip'
      loveTAR: ''
      loveBinaryDirectory: ''
      loveResourcesDirectory: ''
      loveBinary: 'love.exe'
    macos:
      jobArchName: 'macOS'
      # TODO: Update to macOS-latest once all luarocks steps work on it.
      imageName: 'macOS-10.15'
      agentArch: 'macOS'
      artifactPrefix: 'macos.'
      artifactSuffix: ''
      netbuilder: 'mono'
      monokickURL: 'https://github.com/flibitijibibo/MonoKickstart.git'
      lualibs: 'luarocks'
      luarocksPreArgs: '--lua-dir=/usr/local/opt/lua@5.1'
      luarocksArgs: 'LUA_LIBDIR="/usr/local/opt/lua@5.1/lib"'
      loveURL: 'https://github.com/love2d/love/releases/download/11.3/love-11.3-macos.zip'
      loveZIP: 'love.zip'
      loveTAR: ''
      loveBinaryDirectory: 'love.app/Contents/MacOS/'
      loveResourcesDirectory: 'love.app/Contents/Resources/'
      launcher: ''
    linux:
      jobArchName: 'linux'
      imageName: 'ubuntu-latest'
      agentArch: 'linux'
      artifactPrefix: 'linux.'
      artifactSuffix: ''
      netbuilder: 'mono'
      monokickURL: 'https://github.com/flibitijibibo/MonoKickstart.git'
      lualibs: 'luarocks'
      luarocksArgs: 'LUA_LIBDIR="/usr/local/opt/lua/lib"'
      loveURL: 'https://github.com/love2d/love/releases/download/11.3/love-11.3-linux-x86_64.tar.gz'
      loveZIP: ''
      loveTAR: 'love.tar.gz'
      loveBinaryDirectory: ''
      loveResourcesDirectory: ''
      launcher: ''

variables:
  netBuildPlatform: 'Any CPU'
  netBuildConfiguration: 'Release'

name: '$(Date:yy.MM.dd)$(Rev:.rr)'

pool:
  vmImage: '$(imageName)'

steps:
- checkout: self
  clean: false
  fetchDepth: 3
  lfs: false
  submodules: recursive


# Prepare dependencies.
# Use brew on macOS.
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.agentArch, 'macOS'))
  displayName: 'Setup: macOS: brew: install lua lua@5.1 luarocks'
  inputs:
    script: |
      export HOMEBREW_NO_INSTALL_CLEANUP=1
      brew install lua lua@5.1 luarocks

# Use apt on Ubuntu.
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.agentArch, 'linux'))
  displayName: 'Setup: Linux: apt: install luarocks and deps'
  inputs:
    script: |
      sudo apt -y update && sudo apt -y install luarocks libgtk-3-dev

# Cross-platform setup.
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.lualibs, 'luarocks'))
  displayName: 'Setup: luarocks: config'
  inputs:
    script: |
      git config --global url."https://github.com/".insteadOf git://github.com/
      luarocks config lua_version 5.1
      luarocks


# Build LuaRocks depdencies.
# Install subprocess.
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.lualibs, 'luarocks'))
  displayName: 'Build: luarocks: install subprocess'
  inputs:
    script: |
      luarocks $LUAROCKSPREARGS install --tree=luarocks https://raw.githubusercontent.com/0x0ade/lua-subprocess/master/subprocess-scm-1.rockspec $LUAROCKSARGS

# Install nfd.
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.lualibs, 'luarocks'))
  displayName: 'Build: luarocks: install nfd'
  inputs:
    script: |
      luarocks $LUAROCKSPREARGS install --tree=luarocks https://raw.githubusercontent.com/Vexatos/nativefiledialog/master/lua/nfd-scm-1.rockspec $LUAROCKSARGS

# Install lsqlite3complete.
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.lualibs, 'luarocks'))
  displayName: 'Build: luarocks: install lsqlite3complete'
  inputs:
    script: |
      luarocks $LUAROCKSPREARGS install --tree=luarocks lsqlite3complete $LUAROCKSARGS


# Build sharp.
# Use dotnet to restore NuGet packages even when building with mono.
- task: DotNetCoreCLI@2
  displayName: 'Build: dotnet: restore sharp'
  inputs:
    command: 'restore'
    projects: 'sharp/*.csproj'

# Build using core.
- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq(variables.netbuilder, 'core'))
  displayName: 'Build: dotnet: build sharp'
  inputs:
    command: 'build'
    projects: 'sharp/*.csproj'
    arguments: '--configuration $(netBuildConfiguration) "/p:Configuration=$(netBuildConfiguration)"'

# Build using mono.
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.netbuilder, 'mono'))
  displayName: 'Build: mono: build sharp'
  inputs:
    script: 'msbuild sharp/*.sln "/p:Configuration=$(netBuildConfiguration)" "/p:Platform=$(netBuildPlatform)"'


# Build launcher-winforms.
- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq(variables.agentArch, 'windows'))
  displayName: 'Build: dotnet: restore launcher-winforms'
  inputs:
    command: 'restore'
    projects: 'launcher-winforms/*.csproj'

- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq(variables.agentArch, 'windows'))
  displayName: 'Build: dotnet: build launcher-winforms'
  inputs:
    command: 'build'
    projects: 'launcher-winforms/*.csproj'
    arguments: '--configuration $(netBuildConfiguration) "/p:Configuration=$(netBuildConfiguration)"'


# Create and publish an artifact.
# Download and unpack LÖVE.
- task: Cache@2
  condition: and(succeeded(), ne(variables.loveURL, ''))
  displayName: 'Dist: Grab cached LÖVE'
  inputs:
    key: 'love-unpacked | "$(Agent.OS)"'
    path: love-raw
    cacheHitVar: loveCached
- task: PowerShell@2
  condition: and(succeeded(), ne(variables.loveURL, ''), ne(variables.loveCached, 'true'))
  displayName: 'Dist: Download LÖVE'
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      Invoke-WebRequest -Uri $env:LOVEURL -OutFile $env:LOVEZIP$env:LOVETAR
# Unzip love.zip.
- task: PowerShell@2
  condition: and(succeeded(), ne(variables.loveZIP, ''), ne(variables.loveCached, 'true'))
  displayName: 'Dist: Unpack LÖVE (ZIP)'
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      Expand-Archive -Path $env:LOVEZIP -DestinationPath love-raw -Force
# Untar love.tar.gz.
- task: CmdLine@2
  condition: and(succeeded(), ne(variables.loveTAR, ''), ne(variables.loveCached, 'true'))
  displayName: 'Dist: Unpack LÖVE (TAR)'
  continueOnError: true
  inputs:
    script: |
      mkdir -p love-raw && \
      tar xvf $LOVETAR -C love-raw && \
      mv love-raw/dest/* love-raw/ && \
      rmdir love-raw/dest
# Copy cached unpacked LÖVE, fix it up if needed
- task: PowerShell@2
  condition: and(succeeded(), ne(variables.loveURL, ''))
  displayName: 'Dist: Copy and fix cached LÖVE'
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      Copy-Item -Path love-raw -Destination love -Recurse
      if (Test-Path -Path love/love-11.3-win32 -PathType Container) {
        Move-Item -Path love/love-11.3-win32 -Destination love-win
        Remove-Item -Path love -Force -Recurse
        Move-Item -Path love-win -Destination love
        Invoke-WebRequest -Uri "https://github.com/electron/rcedit/releases/download/v1.1.1/rcedit-x64.exe" -OutFile rcedit.exe
        ./rcedit.exe love/love.exe `
          --set-icon icon.ico `
          --set-version-string Comments $env:BUILD_SOURCEVERSION `
          --set-version-string CompanyName "Everest Team" `
          --set-version-string FileDescription Olympus `
          --set-version-string FileVersion $env:BUILD_BUILDNUMBER `
          --set-version-string LegalCopyright "See https://github.com/EverestAPI/Olympus/blob/main/LICENSE" `
          --set-version-string OriginalFilename main.exe `
          --set-version-string ProductName Olympus `
          --set-version-string ProductVersion $env:BUILD_BUILDNUMBER
      }

# Create a dummy dir for platforms which don't use prebuilt LÖVE.
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.loveURL, ''))
  displayName: 'Dist: Create empty LÖVE dir for sad and lonely penguins'
  continueOnError: true
  inputs:
    script: |
      mkdir -p love

# Update the version.txt in the src dir based on the build number.
- task: PowerShell@2
  condition: succeeded()
  displayName: 'Dist: Update src/version.txt'
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      echo "${env:BUILD_BUILDNUMBER}-azure-${env:BUILD_BUILDID}-$(($env:BUILD_SOURCEVERSION).Substring(0, 5))" | Set-Content src/version.txt
# Bundle src into olympus.love.
- task: PowerShell@2
  condition: succeeded()
  displayName: 'Dist: Bundle olympus.love'
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      Compress-Archive -Path src/* -DestinationPath olympus.zip
      Move-Item -Path olympus.zip -Destination olympus.love
      Copy-Item -Path olympus.love -Destination love/$env:LOVEBINARYDIRECTORY/olympus.love
# Glue it onto the love binary.
- task: PowerShell@2
  condition: and(succeeded(), ne(variables.loveBinary, ''))
  displayName: 'Dist: Glue olympus.love onto LÖVE'
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      if ($PSVersionTable.PSVersion.Major -lt 6) {
        Get-Content love/$env:LOVEBINARYDIRECTORY/$env:LOVEBINARY,love/$env:LOVEBINARYDIRECTORY/olympus.love -Encoding Byte -ReadCount 512 | Set-Content love-glued -Encoding Byte
      } else {
        Get-Content love/$env:LOVEBINARYDIRECTORY/$env:LOVEBINARY,love/$env:LOVEBINARYDIRECTORY/olympus.love -AsByteStream -ReadCount 0 | Set-Content love-glued -AsByteStream
      }
      Remove-Item -Path love/$env:LOVEBINARYDIRECTORY/$env:LOVEBINARY -Force
      Move-Item -Path love-glued -Destination love/$env:LOVEBINARYDIRECTORY/$env:LOVEBINARY
      Remove-Item -Path love/$env:LOVEBINARYDIRECTORY/olympus.love -Force

# Copy luarocks.
- task: CopyFiles@2
  condition: and(succeeded(), eq(variables.lualibs, 'luarocks'))
  displayName: 'Dist: Copy luarocks'
  continueOnError: true
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/luarocks/lib/lua'
    contents: '**/*'
    targetFolder: 'love/$(loveBinaryDirectory)'
    cleanTargetFolder: false
    overWrite: true
    flattenFolders: true

# Copy prebuilt libs.
- task: CopyFiles@2
  displayName: 'Dist: Copy prebuilt libs'
  continueOnError: true
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/lib-$(agentArch)'
    contents: '**/*'
    targetFolder: 'love/$(loveBinaryDirectory)'
    cleanTargetFolder: false
    overWrite: true
    flattenFolders: false

# Copy sharp.
- task: CopyFiles@2
  condition: succeeded()
  displayName: 'Dist: Copy sharp'
  continueOnError: true
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/sharp/bin'
    contents: '**/!(xunit.*|System.*|Microsoft.*|*.Tests.dll|*.pdb)'
    targetFolder: 'love/$(loveBinaryDirectory)/sharp'
    cleanTargetFolder: false
    overWrite: true
    flattenFolders: true

# If needed, grab MonoKickstart and shove the prebuilts into the sharp dir.
# Clone.
- task: CmdLine@2
  condition: and(succeeded(), ne(variables.monokickURL, ''))
  displayName: 'Dist: Clone MonoKickstart'
  continueOnError: true
  inputs:
    script: |
      git clone $MONOKICKURL
# Fix Kick filename and bash script.
- task: PowerShell@2
  condition: and(succeeded(), ne(variables.monokickURL, ''))
  displayName: 'Dist: Fix MonoKickstart'
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      Move-Item -Path MonoKickstart/precompiled/kick.bin.osx -Destination MonoKickstart/precompiled/Olympus.Sharp.bin.osx
      Move-Item -Path MonoKickstart/precompiled/kick.bin.x86_64 -Destination MonoKickstart/precompiled/Olympus.Sharp.bin.x86_64
      Remove-Item -Path MonoKickstart/precompiled/kick.bin.x86_64.debug -Force
# Copy the precompiled folder into the sharp folder.
- task: CopyFiles@2
  condition: and(succeeded(), ne(variables.monokickURL, ''))
  displayName: 'Dist: Copy MonoKickstart'
  continueOnError: true
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/MonoKickstart/precompiled'
    contents: '**/*'
    targetFolder: 'love/$(loveBinaryDirectory)/sharp'
    cleanTargetFolder: false
    overWrite: true
    flattenFolders: false
# Copy special additional mono dependencies.
# Those usually come from Ubuntu Mono packages with a version close to the MonoKickstart version.
- task: CopyFiles@2
  displayName: 'Dist: Copy prebuilt mono libs'
  continueOnError: true
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/lib-mono'
    contents: '**/*'
    targetFolder: 'love/$(loveBinaryDirectory)/sharp'
    cleanTargetFolder: false
    overWrite: true
    flattenFolders: true

# Per-platform bundling steps.
# Windows
- task: PowerShell@2
  condition: and(succeeded(), eq(variables.agentArch, 'windows'))
  displayName: 'Dist: Windows: Finish'
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      Remove-Item -Path love/changes.txt -Force
      Remove-Item -Path love/game.ico -Force
      Remove-Item -Path love/love.ico -Force
      Remove-Item -Path love/lovec.exe -Force
      Move-Item -Path love/love.exe -Destination love/main.exe
      New-Item -Path $env:BUILD_ARTIFACTSTAGINGDIRECTORY/main -ItemType Directory
      Compress-Archive -Path love/* -DestinationPath $env:BUILD_ARTIFACTSTAGINGDIRECTORY/main/dist.zip -Force
      New-Item -Path $env:BUILD_ARTIFACTSTAGINGDIRECTORY/update -ItemType Directory
      Copy-Item -Path olympus.love -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/update/olympus.love
      Compress-Archive -Path love/sharp/* -DestinationPath $env:BUILD_ARTIFACTSTAGINGDIRECTORY/update/sharp.zip -Force
      New-Item -Path $env:BUILD_ARTIFACTSTAGINGDIRECTORY/launcher-winforms -ItemType Directory
      Copy-Item -Path launcher-winforms/bin/Release/net452/Olympus.exe -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/launcher-winforms/Olympus.exe

# macOS
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.agentArch, 'macOS'))
  displayName: 'Dist: macOS: Finish'
  continueOnError: true
  inputs:
    script: |
      PLIST=love/love.app/Contents/Info.plist
      rm $PLIST
      mv love/$LOVEBINARYDIRECTORY/Info.plist $PLIST
      plutil -replace CFBundleShortVersionString -string "$BUILD_BUILDNUMBER" $PLIST
      curl https://www.libsdl.org/release/SDL2-2.0.14.dmg -o sdl2.dmg
      hdiutil attach -mountpoint sdl2mount sdl2.dmg
      rm -rf love/love.app/Contents/Frameworks/SDL2.framework
      cp -rf sdl2mount/SDL2.framework love/love.app/Contents/Frameworks/SDL2.framework
      hdiutil detach sdl2mount
      git clone https://luajit.org/git/luajit-2.0.git
      pushd luajit-2.0
      git checkout ec6edc5c39c25e4eb3fca51b753f9995e97215da
      MACOSX_DEPLOYMENT_TARGET=10.7 make
      popd
      cp -f luajit-2.0/src/libluajit.so love/love.app/Contents/Frameworks/Lua.framework/Versions/A/Lua
      cp olympus.sh love/$LOVEBINARYDIRECTORY/olympus.sh
      chmod a+rx love/$LOVEBINARYDIRECTORY/olympus.sh
      chmod a+rx love/$LOVEBINARYDIRECTORY/love
      chmod a+rx love/$LOVEBINARYDIRECTORY/sharp/Olympus.Sharp.bin*
      codesign --remove-signature love/$LOVEBINARYDIRECTORY/love
      mv love/love.app love/Olympus.app
      pushd love
      mkdir $BUILD_ARTIFACTSTAGINGDIRECTORY/main
      zip --symlinks -r $BUILD_ARTIFACTSTAGINGDIRECTORY/main/dist.zip *
      popd

# Linux
- task: CmdLine@2
  condition: and(succeeded(), eq(variables.agentArch, 'linux'))
  displayName: 'Dist: Linux: Finish'
  continueOnError: true
  inputs:
    script: |
      cp olympus.sh love/$LOVEBINARYDIRECTORY/olympus
      chmod a+rx love/$LOVEBINARYDIRECTORY/olympus
      chmod a+rx love/$LOVEBINARYDIRECTORY/love
      chmod a+rx love/$LOVEBINARYDIRECTORY/install.sh
      chmod a+rx love/$LOVEBINARYDIRECTORY/sharp/Olympus.Sharp.bin*
      cp src/data/icon.png love/$LOVEBINARYDIRECTORY/olympus.png
      rm love/$LOVEBINARYDIRECTORY/lib/x86_64-linux-gnu/libz.so.1
      rm love/$LOVEBINARYDIRECTORY/usr/lib/x86_64-linux-gnu/libfreetype.so.6
      rm love/$LOVEBINARYDIRECTORY/love.svg
      rm love/$LOVEBINARYDIRECTORY/love.desktop.in
      rm love/$LOVEBINARYDIRECTORY/license.txt
      pushd love
      mkdir $BUILD_ARTIFACTSTAGINGDIRECTORY/main
      zip --symlinks -r $BUILD_ARTIFACTSTAGINGDIRECTORY/main/dist.zip *
      popd

# Publish.
- task: PublishBuildArtifacts@1
  condition: succeeded()
  displayName: 'Dist: Publish main'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/main'
    artifactName: '$(artifactPrefix)main$(artifactSuffix)'
    publishLocation: 'Container'
- task: PublishBuildArtifacts@1
  condition: and(succeeded(), eq(variables.agentArch, 'windows'))
  displayName: 'Dist: Publish update'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/update'
    artifactName: 'update'
    publishLocation: 'Container'
- task: PublishBuildArtifacts@1
  condition: and(succeeded(), eq(variables.agentArch, 'windows'))
  displayName: 'Dist: Publish launcher-winforms'
  continueOnError: true
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/launcher-winforms'
    artifactName: 'launcher-winforms'
    publishLocation: 'Container'

