name: Build

on: push

env:
  FORCE_COLOR: true
  netBuildPlatform: 'Any CPU'
  netBuildConfiguration: 'Release'

jobs:
  build:
    runs-on: ${{ matrix.imageName }}
    strategy:
      matrix:
        imageName: [windows-latest, macos-10.15, ubuntu-22.04]
        include:
          - imageName: windows-latest
            jobArchName: 'Windows'
            agentArch: 'windows'
            artifactPrefix: 'windows.'
            artifactSuffix: ''
            netbuilder: 'core'
            lualibs: 'prebuilt'
            loveURL: 'https://github.com/love2d/love/releases/download/11.3/love-11.3-win32.zip'
            loveZIP: 'love.zip'
            loveTAR: ''
            loveBinaryDirectory: ''
            loveResourcesDirectory: ''
            loveBinary: 'love.exe'
          - imageName: macos-10.15
            jobArchName: 'macOS'
            agentArch: 'macOS'
            artifactPrefix: 'macos.'
            artifactSuffix: ''
            netbuilder: 'mono'
            monokickURL: 'https://github.com/flibitijibibo/MonoKickstart.git'
            lualibs: 'luarocks'
            luarocksPreArgs: '--lua-dir=/usr/local/opt/lua@5.1'
            luarocksArgs: 'LUA_LIBDIR="/usr/local/opt/lua@5.1/lib"'
            loveURL: 'https://github.com/love2d/love/releases/download/11.3/love-11.3-macos.zip'
            loveZIP: 'love.zip'
            loveTAR: ''
            loveBinaryDirectory: 'love.app/Contents/MacOS/'
            loveResourcesDirectory: 'love.app/Contents/Resources/'
            launcher: ''
          - imageName: ubuntu-22.04
            jobArchName: 'linux'
            agentArch: 'linux'
            artifactPrefix: 'linux.'
            artifactSuffix: ''
            netbuilder: 'mono'
            monokickURL: 'https://github.com/flibitijibibo/MonoKickstart.git'
            lualibs: 'luarocks'
            luarocksArgs: 'LUA_LIBDIR="/usr/local/opt/lua/lib"'
            loveURL: 'https://github.com/love2d/love/releases/download/11.3/love-11.3-linux-x86_64.tar.gz'
            loveZIP: ''
            loveTAR: 'love.tar.gz'
            loveBinaryDirectory: ''
            loveResourcesDirectory: ''
            launcher: ''

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true
      - name: Add msbuild to PATH
        if: ${{ success() && matrix.agentArch == 'windows' }}
        uses: microsoft/setup-msbuild@v1.1

      # Prepare dependencies {{{
      # Use brew on macOS.
      - name: 'Setup: macOS: brew: install lua lua@5.1 luarocks'
        if: ${{ success() && matrix.agentArch == 'macOS' }}
        run: |
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          brew install lua lua@5.1 luarocks

      # Use apt on Ubuntu.
      - name: 'Setup: Linux: apt: install luarocks and deps'
        if: ${{ success() && matrix.agentArch == 'linux' }}
        run: |
          sudo apt -y update && sudo apt -y install luarocks libgtk-3-dev

      # Cross platform setup.
      - name: 'Setup: luarocks: config'
        if: ${{ success() && matrix.lualibs == 'luarocks' }}
        run: |
          git config --global url."https://github.com/".insteadOf git://github.com/
          luarocks config lua_version 5.1
          luarocks
      # }}}
      # Build LuaRocks dependencies. {{{
      - name: 'Build: luarocks: install subprocess'
        if: ${{ success() && matrix.lualibs == 'luarocks' }}
        run: |
          luarocks ${{ matrix.luarocksPreArgs }} install --tree=luarocks https://raw.githubusercontent.com/0x0ade/lua-subprocess/master/subprocess-scm-1.rockspec ${{ matrix.luarocksArgs }}
      - name: 'Build: luarocks: install nfd'
        if: ${{ success() && matrix.lualibs == 'luarocks' }}
        run: |
          luarocks ${{ matrix.luarocksPreArgs }} install --tree=luarocks https://raw.githubusercontent.com/Vexatos/nativefiledialog/master/lua/nfd-scm-1.rockspec ${{ matrix.luarocksArgs }}
      - name: 'Build: luarocks: install lsqlite3complete'
        if: ${{ success() && matrix.lualibs == 'luarocks' }}
        run: |
          luarocks ${{ matrix.luarocksPreArgs }} install --tree=luarocks lsqlite3complete ${{ matrix.luarocksArgs }}
      # }}}
      # Build sharp. {{{
      # Use dotnet to restore NuGet packages even when building with mono.
      - name: 'Build: dotnet: restore sharp'
        run: |
          dotnet restore sharp/Olympus.Sharp.csproj --verbosity Detailed
      # Build using core.
      - name: 'Build: dotnet: build sharp'
        if: ${{ success() && matrix.netbuilder == 'core' }}
        run: |
          dotnet build sharp/Olympus.Sharp.csproj --configuration ${{ env.netBuildConfiguration }} "/p:Configuration=${{ env.netBuildConfiguration }}"
      # Build using mono.
      - name: 'Build: mono: build sharp'
        if: ${{ success() && matrix.netbuilder == 'mono' }}
        run: |
          msbuild sharp/Olympus.Sharp.sln "/p:Configuration=${{ env.netBuildConfiguration }}" "/p:Platform=${{ env.netBuildPlatform }}"
      # }}}
      # Build launcher-winforms. {{{
      - name: 'Build: dotnet: restore launcher-winforms'
        if: ${{ success() && matrix.agentArch == 'windows' }}
        run: |
          dotnet restore launcher-winforms/Olympus.csproj --verbosity Detailed
      - name: 'Build: dotnet: build launcher-winforms'
        if: ${{ success() && matrix.agentArch == 'windows' }}
        run: |
          dotnet build launcher-winforms/Olympus.csproj --configuration ${{ env.netBuildConfiguration }} "/p:Configuration=${{ env.netBuildConfiguration }}"
      # }}}
      # Create and publish an artifact. {{{
      # Download and unpack LÖVE.
      - name: 'Dist: Download LÖVE'
        if: ${{ success() && matrix.loveURL != '' }}
        shell: pwsh
        run: |
          Invoke-Webrequest -Uri ${{ matrix.loveURL }} -OutFile ${{ matrix.loveZIP }} ${{ matrix.loveTAR }}
      # Unzip love.zip.
      - name: 'Dist: Unpack LÖVE (ZIP)'
        if: ${{ success() && matrix.loveZIP != '' }}
        shell: pwsh
        run: |
          Expand-Archive -Path ${{ matrix.loveZIP }} -DestinationPath love-raw -Force
      # Untar love.tar.gz.
      - name: 'Dist: Unpack LÖVE (TAR)'
        if: ${{ success() && matrix.loveTAR != '' }}
        run: |
          mkdir -p love-raw && \
          tar -xvf ${{ matrix.loveTAR }} -C love-raw && \
          mv love-raw/dest/* love-raw/ && \
          rmdir love-raw/dest
      # Copy cached LÖVE, fix it up if needed.
      - name: 'Dist: Copy and fix cached LÖVE'
        if: ${{ success() && matrix.loveURL != '' }}
        shell: pwsh
        run: |
          Copy-Item -Path love-raw -Destination love -Recurse
          if (Test-Path -Path love/love-11.3-win32 -PathType Container) {
            Move-Item -Path love/love-11.3-win32 -Destination love-win
            Remove-Item -Path love -Force -Recurse
            Move-Item -Path love-win -Destination love
            Invoke-WebRequest -Uri "https://github.com/electron/rcedit/releases/download/v1.1.1/rcedit-x64.exe" -OutFile rcedit.exe
            ./rcedit.exe love/love.exe `
              --set-icon icon.ico `
              --set-version-string Comments $env:GITHUB_SHA `
              --set-version-string CompanyName "Everest Team" `
              --set-version-string FileDescription Olympus `
              --set-version-string FileVersion $env:GITHUB_RUN_NUMBER `
              --set-version-string LegalCopyright "See https://github.com/EverestAPI/Olympus/blob/main/LICENSE" `
              --set-version-string OriginalFilename main.exe `
              --set-version-string ProductName Olympus `
              --set-version-string ProductVersion $env:GITHUB_RUN_NUMBER
          }
      # Create a dummy dir for platforms which don't use prebuilt LÖVE.
      - name: 'Dist: Create empty LÖVE dir for sad and lonely penguins'
        if: ${{ success() && matrix.loveURL == '' }}
        run: mkdir -p love
      # Update the version.txt in the src dir based on the build number.
      - name: 'Dist: Update src/version.txt'
        if: ${{ success() }}
        shell: pwsh
        run: |
          echo "$env:GITHUB_RUN_NUMBER-gha-$env:GITHUB_RUN_ID-$(($env:GITHUB_SHA).Substring(0, 6))" | Set-Content src/version.txt
      - run: cat src/version.txt
      # Bundle src into olympus.love
      - name: 'Dist: Bundle olympus.love'
        if: ${{ success() }}
        shell: pwsh
        run: |
          Compress-Archive -Path src/* -DestinationPath olympus.zip
          Move-Item -Path olympus.zip -Destination olympus.love
          Copy-Item -Path olympus.love -Destination love/${{ matrix.loveBinaryDirectory }}/olympus.love
      # Glue it onto the love binary.
      - name: 'Dist: Glue olympus.love onto LÖVE'
        if: ${{ success() && matrix.loveBinary != '' }}
        shell: pwsh
        run: |
          if ($PSVersionTable.PSVersion.Major -lt 6) {
            Get-Content love/${{ matrix.loveBinaryDirectory }}/${{ matrix.loveBinary }},love/${{ matrix.loveBinaryDirectory }}/olympus.love -Encoding Byte -ReadCount 512 | Set-Content love-glued -Encoding Byte
          } else {
            Get-Content love/${{ matrix.loveBinaryDirectory }}/${{ matrix.loveBinary }},love/${{ matrix.loveBinaryDirectory }}/olympus.love -AsByteStream -ReadCount 0 | Set-Content love-glued -AsByteStream
          }
          Remove-Item -Path love/${{ matrix.loveBinaryDirectory }}/${{ matrix.loveBinary }} -Force
          Move-Item -Path love-glued -Destination love/${{ matrix.loveBinaryDirectory }}/${{ matrix.loveBinary }}
          Remove-Item -Path love/${{ matrix.loveBinaryDirectory }}/olympus.love -Force
      # Copy luarocks.
      - name: "Dist: Copy luarocks"
        if: ${{ success() && matrix.lualibs == 'luarocks' }}
        run: |
          cp luarocks/lib/lua/**/* love/${{ matrix.loveBinaryDirectory }}
      # Copy prebuilt libs.
      - name: "Dist: Copy prebuilt libs"
        if: ${{ success() }}
        run: |
          cp sharp/bin/**/!(xunit.*|System.*|Microsoft.*|*.Tests.dll|*.pdb) love/${{ matrix.loveBinaryDirectory }}/sharp
      # }}}
      
      # If needed, grab MonoKickstart and shove the prebuilts into the sharp dir. {{{
      # Clone.
      - name: "Dist: Clone MonoKickstart"
        if: ${{ success() && matrix.monokickURL != '' }}
        run: |
          git clone ${{ matrix.monokickURL }}
      - name: "Dist: Fix MonoKickstart"
        if: ${{ success() && matrix.monokickURL != '' }}
        shell: pwsh
        run: |
          Move-Item -Path MonoKickstart/precompiled/kick.bin.osx -Destination MonoKickstart/precompiled/Olympus.Sharp.bin.osx
          Move-Item -Path MonoKickstart/precompiled/kick.bin.x86_64 -Destination MonoKickstart/precompiled/Olympus.Sharp.bin.x86_64
          Remove-Item -Path MonoKickstart/precompiled/kick.bin.x86_64.debug -Force
      # Copy the precompiled folder into the sharp folder.
      - name: "Dist: Copy MonoKickstart"
        if: ${{ success() && matrix.monokickURL != '' }}
        run: |
          cp MonoKickstart/precompiled/**/* love/${{ matrix.loveBinaryDirectory }}/sharp
      # Copy special additional mono dependencies.
      # Those usually come from Ubuntu Mono packages with a version close to the MonoKickstart version.
      - name: "Dist: Copy prebuilt mono libs"
        if: ${{ success() }}
        run: |
          cp lib-mono/**/* love/${{ matrix.loveBinaryDirectory }}/sharp
      # }}}
      
      # Per-platform bundling steps. {{{
      - name: "Dist: Create artifact staging directories"
        run: |
          mkdir a
      # Windows
      - name: "Dist: Windows: Finish"
        if: ${{ success() && matrix.agentArch == 'windows' }}
        shell: pwsh
        run: |
          Remove-Item -Path love/changes.txt -Force
          Remove-Item -Path love/game.ico -Force
          Remove-Item -Path love/love.ico -Force
          Remove-Item -Path love/lovec.exe -Force
          Move-Item -Path love/love.exe -Destination love/main.exe
          New-Item -Path a/windows/main -ItemType Directory
          Compress-Archive -Path love/* -DestinationPath a/main/dist.zip -Force
          New-Item -Path a/update -ItemType Directory
          Copy-Item -Path olympus.love -Destination a/update/olympus.love
          Compress-Archive -Path love/sharp/* -DestinationPath a/update/sharp.zip -Force
          New-Item -Path a/launcher-winforms -ItemType Directory
          Copy-Item -Path launcher-winforms/bin/Release/net452/Olympus.exe -Destination a/launcher-winforms/Olympus.exe
      - name: "Dist macOS: Finish"
        if: ${{ success() && matrix.agentArch == 'macOS' }}
        run: |
          PLIST=love/love.app/Contents/Info.plist
          rm $PLIST
          mv love/${{ matrix.loveBinaryDirectory }}/Info.plist $PLIST
          plutil -replace CFBundleShortVersionString -string "$GITHUB_RUN_NUMBER" $PLIST
          curl https://www.libsdl.org/release/SDL2-2.0.14.dmg -o sdl2.dmg
          hdiutil attach -mountpoint sdl2mount sdl2.dmg
          rm -rf love/love.app/Contents/Frameworks/SDL2.framework
          cp -rf sdl2mount/SDL2.framework love/love.app/Contents/Frameworks/SDL2.framework
          hdiutil detach sdl2mount
          git clone https://luajit.org/git/luajit-2.0.git
          pushd luajit-2.0
          git checkout ec6edc5c39c25e4eb3fca51b753f9995e97215da
          MACOSX_DEPLOYMENT_TARGET=10.7 make
          popd
          cp -f luajit-2.0/src/libluajit.so love/love.app/Contents/Frameworks/Lua.framework/Versions/A/Lua
          cp olympus.sh love/${{ matrix.loveBinaryDirectory }}/olympus.sh
          chmod a+rx love/${{ matrix.loveBinaryDirectory }}/olympus.sh
          chmod a+rx love/${{ matrix.loveBinaryDirectory }}/love
          chmod a+rx love/${{ matrix.loveBinaryDirectory }}/sharp/Olympus.Sharp.bin*
          codesign --remove-signature love/${{ matrix.loveBinaryDirectory }}/love
          mv love/love.app love/Olympus.app
          pushd love
          mkdir a/main
          zip --symlinks -r a/main/dist.zip *
          popd
      - name: "Dist: Linux: Finish"
        if: ${{ success() && matrix.agentArch == 'linux' }}
        run: |
          cp olympus.sh love/${{ matrix.loveBinaryDirectory }}/olympus
          chmod a+rx love/${{ matrix.loveBinaryDirectory }}/olympus
          chmod a+rx love/${{ matrix.loveBinaryDirectory }}/love
          chmod a+rx love/${{ matrix.loveBinaryDirectory }}/install.sh
          chmod a+rx love/${{ matrix.loveBinaryDirectory }}/sharp/Olympus.Sharp.bin*
          cp src/data/icon.png love/${{ matrix.loveBinaryDirectory }}/olympus.png
          rm love/${{ matrix.loveBinaryDirectory }}/lib/x86_64-linux-gnu/libz.so.1
          rm love/${{ matrix.loveBinaryDirectory }}/usr/lib/x86_64-linux-gnu/libfreetype.so.6
          rm love/${{ matrix.loveBinaryDirectory }}/love.svg
          rm love/${{ matrix.loveBinaryDirectory }}/love.desktop.in
          rm love/${{ matrix.loveBinaryDirectory }}/license.txt
          pushd love
          mkdir a/main
          zip --symlinks -r a/main/dist.zip *
          popd
      # }}}

      # Publish. {{{
      - name: "Dist: Publish main"
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifactPrefix }}main${{ matrix.artifactSuffix }}
          path: a/main
      - name: "Dist: Publish update"
        uses: actions/upload-artifact@v3
        if: ${{ success() && matrix.agentArch == 'windows' }}
        with:
          name: update
          path: a/update
      - name: "Dist: Publish launcher-winforms"
        if: ${{ success() && matrix.agentArch == 'windows' }}
        uses: actions/upload-artifact@v3
        with:
          name: launcher-winforms
          path: a/launcher-winforms
      # }}}
